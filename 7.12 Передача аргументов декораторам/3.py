"""
Объявите функцию, которая принимает строку с кириллицей (и другими символами)
и преобразовывает русские буквы в латиницу, используя следующий словарь для
замены русских букв на соответствующее латинское написание:

t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e',
     'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',
     'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
     'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '',
     'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
Функция должна возвращать преобразованную строку. Замены делать без учета
регистра (переданную строку перевести в нижний регистр - малые буквы).

Определите декоратор с параметром chars и начальным значением " !?", который
данные символы преобразует в символ "-" и, кроме того, все подряд идущие
дефисы (например, "--" или "---") приводит к одному дефису. Полученный
результат должен возвращаться в виде строки.

Примените декоратор с аргументом chars="?!:;,. " к функции и вызовите
декорированную функцию для строки s:

s = input()
Результат работы декорированной функции отобразите на экране.

Sample Input:

Декораторы - это круто!
Sample Output:

dekoratory-eto-kruto-
"""
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e',
     'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',
     'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
     'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '',
     'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}


def in_decor_replace(chars=" !?"):
    def decor_replace(func):
        def replace(f, *args, **kwargs):
            for i in range(len(chars)):
                f = func(f, *args, **kwargs).replace(chars[i], '-')
            while func(f, *args, **kwargs).count('--'):
                f = func(f, *args, **kwargs).replace('--', '-')
            return f

        return replace

    return decor_replace


s = input()


@in_decor_replace(chars="?!:;,. ")
def ru_convert_en(strRu):
    strRu = strRu.lower()
    strEn = ""
    for i in range(len(strRu)):
        if strRu[i] in t:
            strEn += str(t.get(strRu[i]))
        else:
            strEn += strRu[i]

    return strEn


print(ru_convert_en(s))
